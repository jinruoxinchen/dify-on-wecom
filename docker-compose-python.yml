version: '3.8'

# 使用Python后端的测试配置
services:
  # 后端服务 - 使用Python实现
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.python
    restart: always
    ports:
      - "8001:8000"  # 修改端口避免冲突
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - DIFY_API_KEY=${DIFY_API_KEY:-test_key}
      - DIFY_API_URL=${DIFY_API_URL:-http://localhost:8000}
      - WECHAT_TOKEN=${WECHAT_TOKEN:-test_token}
      - WECHAT_ENCODING_AES_KEY=${WECHAT_ENCODING_AES_KEY:-test_key}
      - WECHAT_CORP_ID=${WECHAT_CORP_ID:-test_id}
    depends_on:
      - rabbitmq
    volumes:
      - ./logs:/app/logs
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端服务
  frontend:
    image: nginx:alpine
    restart: always
    ports:
      - "8080:80"  # 修改端口避免冲突
    volumes:
      - ./dist:/usr/share/nginx/html
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ服务
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5673:5672"   # AMQP协议端口 - 修改避免冲突
      - "15673:15672" # 管理界面端口 - 修改避免冲突
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-test-data:/var/lib/rabbitmq
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  test-network:
    driver: bridge
    name: dify-test-network

volumes:
  rabbitmq-test-data:
    name: rabbitmq-test-data
